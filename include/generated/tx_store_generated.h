// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_TXSTORE_TX_STORE_H_
#define FLATBUFFERS_GENERATED_TXSTORE_TX_STORE_H_

#include "flatbuffers/flatbuffers.h"

namespace tx_store {

struct Vector;

struct Entry;

struct Vector FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum {
    VT_LENGTH = 4,
    VT_BYTES = 6
  };
  uint64_t length() const {
    return GetField<uint64_t>(VT_LENGTH, 0);
  }
  const flatbuffers::Vector<uint8_t> *bytes() const {
    return GetPointer<const flatbuffers::Vector<uint8_t> *>(VT_BYTES);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint64_t>(verifier, VT_LENGTH) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, VT_BYTES) &&
           verifier.Verify(bytes()) &&
           verifier.EndTable();
  }
};

struct VectorBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_length(uint64_t length) {
    fbb_.AddElement<uint64_t>(Vector::VT_LENGTH, length, 0);
  }
  void add_bytes(flatbuffers::Offset<flatbuffers::Vector<uint8_t>> bytes) {
    fbb_.AddOffset(Vector::VT_BYTES, bytes);
  }
  VectorBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  VectorBuilder &operator=(const VectorBuilder &);
  flatbuffers::Offset<Vector> Finish() {
    const auto end = fbb_.EndTable(start_, 2);
    auto o = flatbuffers::Offset<Vector>(end);
    return o;
  }
};

inline flatbuffers::Offset<Vector> CreateVector(
    flatbuffers::FlatBufferBuilder &_fbb,
    uint64_t length = 0,
    flatbuffers::Offset<flatbuffers::Vector<uint8_t>> bytes = 0) {
  VectorBuilder builder_(_fbb);
  builder_.add_length(length);
  builder_.add_bytes(bytes);
  return builder_.Finish();
}

inline flatbuffers::Offset<Vector> CreateVectorDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    uint64_t length = 0,
    const std::vector<uint8_t> *bytes = nullptr) {
  return tx_store::CreateVector(
      _fbb,
      length,
      bytes ? _fbb.CreateVector<uint8_t>(*bytes) : 0);
}

struct Entry FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  enum {
    VT_TAG = 4,
    VT_VALUE = 6
  };
  uint64_t tag() const {
    return GetField<uint64_t>(VT_TAG, 0);
  }
  const flatbuffers::Vector<flatbuffers::Offset<Vector>> *value() const {
    return GetPointer<const flatbuffers::Vector<flatbuffers::Offset<Vector>> *>(VT_VALUE);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<uint64_t>(verifier, VT_TAG) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, VT_VALUE) &&
           verifier.Verify(value()) &&
           verifier.VerifyVectorOfTables(value()) &&
           verifier.EndTable();
  }
};

struct EntryBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_tag(uint64_t tag) {
    fbb_.AddElement<uint64_t>(Entry::VT_TAG, tag, 0);
  }
  void add_value(flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<Vector>>> value) {
    fbb_.AddOffset(Entry::VT_VALUE, value);
  }
  EntryBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  EntryBuilder &operator=(const EntryBuilder &);
  flatbuffers::Offset<Entry> Finish() {
    const auto end = fbb_.EndTable(start_, 2);
    auto o = flatbuffers::Offset<Entry>(end);
    return o;
  }
};

inline flatbuffers::Offset<Entry> CreateEntry(
    flatbuffers::FlatBufferBuilder &_fbb,
    uint64_t tag = 0,
    flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<Vector>>> value = 0) {
  EntryBuilder builder_(_fbb);
  builder_.add_tag(tag);
  builder_.add_value(value);
  return builder_.Finish();
}

inline flatbuffers::Offset<Entry> CreateEntryDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    uint64_t tag = 0,
    const std::vector<flatbuffers::Offset<Vector>> *value = nullptr) {
  return tx_store::CreateEntry(
      _fbb,
      tag,
      value ? _fbb.CreateVector<flatbuffers::Offset<Vector>>(*value) : 0);
}

inline const tx_store::Entry *GetEntry(const void *buf) {
  return flatbuffers::GetRoot<tx_store::Entry>(buf);
}

inline bool VerifyEntryBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<tx_store::Entry>(nullptr);
}

inline void FinishEntryBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<tx_store::Entry> root) {
  fbb.Finish(root);
}

}  // namespace tx_store

#endif  // FLATBUFFERS_GENERATED_TXSTORE_TX_STORE_H_
