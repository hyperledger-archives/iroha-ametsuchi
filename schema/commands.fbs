include "asset.fbs";
include "account.fbs";
include "primitives.fbs";

namespace iroha;

//////////////////////////////////////////
/// Commands for Account
table AccountAdd {
    account: [ubyte] (required, nested_flatbuffer: "Account");
}

table AccountRemove {
    pubkey: string;
}

// Suggest account -> pubkey in below three commands.
table AccountAddSignatory {
    account:   string   (required);
    signatory: [string] (required);
}

table AccountRemoveSignatory {
    account:   string   (required);
    signatory: [string] (required);
}

table AccountSetUseKeys {
    accounts: [string] (required);
    useKeys:  ushort;
}

// used by root, It is needed private key lost. Register new key-pair
table AccountMigrate{
    account:    [ubyte] (required, nested_flatbuffer: "Account");
    prevPubKey: string;
}

// users are able to store custom data in their accounts
table AccountStore {
    accPubKey: string           (required);
    data:      [KeyValueObject] (required);
}
//////////////////////////////////////////

//////////////////////////////////////////
/// Commands for Chaincode
table ChaincodeAdd {
    code: [ubyte] (required, nested_flatbuffer: "Chaincode");
}

table ChaincodeRemove {
    code_name: string (required);
    domain_name: string  (required);
    ledger_name: string  (required);
}

table ChaincodeExecute {
  code_name:   string  (required);
  domain_name: string  (required);
  ledger_name: string  (required);
}
//////////////////////////////////////////


//////////////////////////////////////////
/// Commands for Asset
// logically means asset summation
table Add {
    accPubKey: string    (required);
    asset:     [ubyte]   (required, nested_flatbuffer: "Asset");
}

table Subtract {
    accPubKey: string    (required);
    asset:     [ubyte]   (required, nested_flatbuffer: "Asset");
}

table Transfer {
    asset: [ubyte]  (required, nested_flatbuffer: "Asset");
    sender:   string   (required);
    receiver: string   (required);
}

//////////////////////////////////////////
/// Commands for meta Asset
// logically means asset summation

// needed to implement correct permission model:
// user may have permission to add asset, but not to create and vice versa.
table AssetCreate {
    asset_name:  string (required);
    domain_name: string (required);
    ledger_name: string (required);
}

table AssetRemove {
    asset_name:  string (required);
    domain_name: string (required);
    ledger_name: string (required);
}
//////////////////////////////////////////



//////////////////////////////////////////
/// Commands for Peer
table PeerAdd {
    peer: [ubyte] (required, nested_flatbuffer: "Peer");
}

table PeerRemove {
    peerPubKey: string  (required);
}

// set new peer trust (with specific value)
table PeerSetTrust {
    peerPubKey: string   (required);
    trust:      double;
}

// change current trust to some delta
// example: delta=-5, trust=10 -> newTrust = 10-5 = 5
table PeerChangeTrust {
    peerPubKey: string   (required);
    delta:      double;
}

table PeerSetActive {
    peerPubKey: string   (required);
    active:     bool;
}
//////////////////////////////////////////



//////////////////////////////////////////
/// Commands for Permission

table PermissionAdd {
    // This account will be changed permission. If targetAccount is null, All account will be changed
    targetAccount:   string;
    permission:      AccountPermission;
}
table PermissionRemove {

    // This account will be changed permission. If targetAccount is null, All account will be changed
    targetAccount:   string;
    permission:      AccountPermission;
}
//////////////////////////////////////////



union Command {
// Use for operate Asset.
    Add,
    Subtract,
    Transfer,

// Use for meta operate in domain
    AssetCreate,
    AssetRemove,

// Use for peer operate
    PeerAdd,
    PeerRemove,
    PeerSetActive,
    PeerSetTrust,
    PeerChangeTrust,

// Use for account operate
    AccountAdd,
    AccountRemove,
    AccountAddSignatory,
    AccountRemoveSignatory,
    AccountSetUseKeys,
    AccountMigrate,

    ChaincodeAdd,
    ChaincodeRemove,
    ChaincodeExecute,

    PermissionRemove,
    PermissionAdd
}
